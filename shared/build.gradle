apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'

def RememberFramework = "RememberShared"

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS') {
            binaries {
                framework(RememberFramework)
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            api "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.3.2"
        }

        commonTest.dependencies {
//            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$kotlinCoroutinesVersion"
//            implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
//            implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//            implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
//            api "io.ktor:ktor-client-mock:$ktor_version"
//            api "io.ktor:ktor-client-mock-js:$ktor_version"
//            api "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
//            implementation "io.mockk:mockk-common:$mockk_version"
//            implementation "io.mockk:mockk:$mockk_version"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            api "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.2"
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
                api "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.2"
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup Android specific info for androidMain sub-library
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework(RememberFramework, mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode