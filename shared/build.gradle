apply plugin: 'kotlin-multiplatform'
apply plugin: 'com.android.library'
apply plugin: 'kotlinx-serialization'
apply plugin: 'jacoco'

def RememberFramework = "RememberShared"

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64
        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false

        fromPreset(iOSTarget, 'iOS') {
            binaries {
//                freeCompilerArgs += "-Xobjc-generics"
                framework(RememberFramework) {
//                    transitiveExport = true
//
                    // Disable bitcode embedding for the simulator build.
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain {
            dependencies {
                // kotlin
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                // kotlin/coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutinesVersion"

                // ktor
                implementation "io.ktor:ktor-client-core:$ktorVersion"
                implementation "io.ktor:ktor-client-json:$ktorVersion"
                implementation "io.ktor:ktor-client-cio:$ktorVersion"

                // serialisation
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializationVersion"
            }
        }

        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
                implementation "io.mockk:mockk-common:$mockkVersion"
                implementation "io.mockk:mockk:$mockkVersion"
            }
        }

        androidMain {
            dependsOn commonMain
            dependencies {
                // kotlin
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                // kotlin/coroutines
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

                // ktor
                implementation "io.ktor:ktor-client-android:$ktorVersion"
                implementation "io.ktor:ktor-client-okhttp:$ktorVersion"
                implementation "io.ktor:ktor-client-json-jvm:$ktorVersion"

                // serialisation
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
            }
        }

        androidTest {
            dependsOn androidMain
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
                implementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
            }
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
                // kotlin
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                // kotlin
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutinesVersion"

                // ktor
                implementation "io.ktor:ktor-client-core-native:$ktorVersion"
                implementation "io.ktor:ktor-client-ios:$ktorVersion"

                // serialisation
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializationVersion"
            }
        }

        iOSTest {
            dependsOn iOSMain
            dependencies {

            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup Android specific info for androidMain sub-library
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

android {
    compileSdkVersion compileVersion

    defaultConfig {
        minSdkVersion minVersion
        targetSdkVersion targetVersion
        versionCode 1
        versionName "1.0"
    }

    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
    }

    packagingOptions {
        exclude 'META-INF/*.kotlin_module'
    }

    testOptions.unitTests.includeAndroidResources = true
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup Packing for XCode
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.iOS.binaries.getFramework(RememberFramework, mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Setup JaCoCo
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for Debug build"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def excludes = [
            '**/R.class',
            '**/R$*.class',
            '**/*$ViewInjector*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            '**/*Fragment.*',
            '**/*Activity.*'
    ]
    def intermediateExcludes = fileTree(dir: "$buildDir/intermediates/classes/debug", excludes: excludes)
    def kotlinExcludes = fileTree(dir: "$buildDir/tmp/kotlin-classes/debug", excludes: excludes)

    executionData(files("$buildDir/jacoco/testDebugUnitTest.exec"))
    additionalClassDirs(intermediateExcludes + kotlinExcludes)
    additionalSourceDirs(files([android.sourceSets.main.java.srcDirs, "src/main/java"]))
}